<?phpclass sendMail {    var $to = null;    var $message = null;    var $template = null;    var $replacer = null;    var $subject = null;    var $from = null;    var $from_name = null;    var $mime_boundary = null;    var $eol = "\n";    var $headers = null;    var $new_msg = null;    public function __construct() {        $this->mime_boundary = md5(time());        $this->template = dirname(CORE_DIR) . DS . 'email' . DS . 'email_template.html';    }    public function replace_string($patterns, $replacements) {        //message must be set        if (!empty($this->message))            $this->message = preg_replace($patterns, $replacements, $this->message);        else            echo "First set the message!";    }    public function useTemplate() {        $string = file_get_contents($this->template);        $this->from = (empty($this->from)) ? 'no-reply@5letterbrands.com' : $this->from;        $this->from_name = (empty($this->fromname)) ? '5LetterBrands' : $this->fromname;        if (!empty($this->replacer)) {            $string = preg_replace('/src="/', 'src="' . HTTP_CORE_BASE . 'email/', $string);            foreach ($this->replacer as $patern => $content) {                $patern = '/<\$' . $patern . '\$>/';                $string = preg_replace($patern, $content, $string);            }        }        $this->message = $string;    }    private function setHeaders() {        $this->headers = "From: $this->from_name <$this->from>" . $this->eol;        $this->headers .= "Reply-To: $this->from_name <$this->from>" . $this->eol;        $this->headers .= "Return-Path: $this->from_name <$this->from>" . $this->eol;        $this->headers .= "Message-ID: <" . time() . "-" . $this->from . ">" . $this->eol;        $this->headers .= "X-Mailer: PHP v" . phpversion() . $this->eol;          // These two to help avoid spam-filters        $this->headers .= "MIME-Version: 1.0" . $this->eol;        $this->headers .= "Content-Type: multipart/alternative; boundary=\"$this->mime_boundary\"" . $this->eol;    }    private function setMessage() {        $this->new_msg = "--$this->mime_boundary" . $this->eol;        $this->new_msg .= "Content-Type: text/html; charset=UTF-8" . $this->eol;        $this->new_msg .= "Content-Transfer-Encoding: 8bit" . $this->eol . $this->eol;        $this->new_msg .= $this->message . $this->eol . $this->eol;        $this->new_msg .= "--" . $this->mime_boundary . "--" . $this->eol . $this->eol;    }    public function send() {        $this->setHeaders();        $this->setMessage();        ini_set(sendmail_from, $this->from);  // the INI lines are to force the From Address to be used !        $mail_sent = @mail($this->to, $this->subject, $this->new_msg, $this->headers);        ini_restore(sendmail_from);        return $mail_sent;    }}?>