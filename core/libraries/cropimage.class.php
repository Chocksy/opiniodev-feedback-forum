<?phpini_set ( "memory_limit", "64M" );class cropImage {    // Initialize variables;    var $imgSrc, $myImage, $cropHeight, $cropWidth, $x, $y, $thumb, $dif,$size_string,$zoom,$size;    function  __construct($image,$size,$zoom='.7') {        $this->imgSrc=$image;        $this->size=$size;        $this->zoom=$zoom;        ;    }    function changeImage($image) {        $this->imgSrc=$image;    }    function changeSize($size) {        $this->size=$size;    }    function changeZoom($zoom) {        $this->zoom=$zoom;    }    /**     * Stage 2: Read the image and check if it is present on our cache folder. If so we'll just use the cached version. Take in account that even if you supply     * an image on an external source it will not check the image itself but rather the link, thus, no external connection is made.     *     * Also check what type of file we're working with. Different files, different methods.     *     * @param $image The image that it's to crop&scale     * @return nothing     */    function analyzeImage() {        // Getting the image dimensions        list ( $width, $height ) = getimagesize ( $this->imgSrc );        // Check what file we're working with        if ($this->getExtension ( $this->imgSrc ) == 'png') {            //create image png            $this->myImage = imagecreatefrompng ( $this->imgSrc ) or die ( "Error: Cannot find image!" );            imagealphablending ( $this->myImage, true ); // setting alpha blending on            imagesavealpha ( $this->myImage, true ); // save alphablending setting (important)        } elseif ($this->getExtension ( $this->imgSrc ) == 'jpg' || $this->getExtension ( $this->imgSrc ) == 'jpeg' || $this->getExtension ( $this->imgSrc ) == 'jpe') {            //create image jpeg            $this->myImage = imagecreatefromjpeg ( $this->imgSrc ) or die ( "Error: Cannot find image!" );        }        // Find biggest length        if ($width > $height)            $biggestSide = $width;        else            $biggestSide = $height;        // This will zoom in to 50% zoom (crop!)        $cropPercent = $this->zoom;        // Get the size that you submitted for resize on the URL        $both_sizes = explode ( "x", $this->size );        // Check if it was submited something like 50x50 and not only 50 (wich is also supported)        if (count ( $both_sizes ) == 2) {            if ($width > $height) {                // Apply the cropping formula                $this->cropHeight = $biggestSide * round ( ($both_sizes [1] * $cropPercent) / $both_sizes [0], 2 );                $this->cropWidth = $biggestSide * $cropPercent;            } else {                // Apply the cropping formula                $this->cropHeight = $biggestSide * $cropPercent;                $this->cropWidth = $biggestSide * round ( ($both_sizes [0] * $cropPercent) / $both_sizes [1], 2 );            }            $this->size_string=$this->size;        } else {            $this->cropHeight = $biggestSide * $cropPercent;            $this->cropWidth = $biggestSide * $cropPercent;            $this->size_string=$this->size.'x'.$this->size;        }        // Getting the top left coordinate        $this->x = ($width - $this->cropWidth) / 2;        $this->y = ($height - $this->cropHeight) / 2;    }    /**     * From a file get the extension     *     * @param $filename The filename     * @return string file extension     */    function getExtension($filename) {        return $ext = strtolower ( array_pop ( explode ( '.', $filename ) ) );    }    /**     * For PNG files (and possibly GIF) add transparency filter     *     * @param $new_image     * @param $image_source     * @return nothing     */    function setTransparency($new_image, $image_source) {        $transparencyIndex = imagecolortransparent ( $image_source );        $transparencyColor = array ('red' => 255, 'green' => 255, 'blue' => 255 );        if ($transparencyIndex >= 0) {            $transparencyColor = imagecolorsforindex ( $image_source, $transparencyIndex );        }        $transparencyIndex = imagecolorallocate ( $new_image, $transparencyColor ['red'], $transparencyColor ['green'], $transparencyColor ['blue'] );        imagefill ( $new_image, 0, 0, $transparencyIndex );        imagecolortransparent ( $new_image, $transparencyIndex );    }    /**     * Stage 3: Apply the changes and create image resource (new one).     *     * @return nothing     */    function createThumb() {        $thumbSizex = $thumbSizey = $this->size;        $both_sizes = explode ( "x", $this->size );        if (count ( $both_sizes ) == 2) {            $thumbSizex = $both_sizes [0];            $thumbSizey = $both_sizes [1];        }        $this->thumb = imagecreatetruecolor ( $thumbSizex, $thumbSizey );        $bg = imagecolorallocate ( $this->thumb, 255, 255, 255 );        imagefill ( $this->thumb, 0, 0, $bg );        imagecopyresampled ( $this->thumb, $this->myImage, 0, 0, $this->x, $this->y, $thumbSizex, $thumbSizey, $this->cropWidth, $this->cropHeight );        if ($this->getExtension ( $this->imgSrc ) == 'png' && isset ( $_GET ['transparent'] ) && $_GET ['transparent'] == 1) {            $this->setTransparency ( $this->thumb, $this->myImage );        }    }    /**     * Stage 4: Save image in cache and return the new image.     *     * @return nothing     */    function renderImage() {        $image_created = "";        if ($this->getExtension ( $this->imgSrc ) == 'png') {            header ( 'Content-type: image/png' );            imagepng ( $this->thumb );            /**             * Save image to the cache folder             */            imagepng($this->thumb, 'img_cache/'.$this->size_string.end(explode("/",$this->imgSrc)));        } elseif ($this->getExtension ( $this->imgSrc ) == 'jpg' || $this->getExtension ( $this->imgSrc ) == 'jpeg' || $this->getExtension ( $this->imgSrc ) == 'jpe') {            header ( 'Content-type: image/jpeg' );            imagejpeg ( $this->thumb );            /**             * Save image to the cache folder             */            imagejpeg($this->thumb,'img_cache/'.$this->size_string.end(explode("/",$this->imgSrc)));        }    }    function saveImage($savepath,$quality=100) {        $image_created = "";        if ($this->getExtension ( $this->imgSrc ) == 'png') {            imagepng($this->thumb, $savepath);        } elseif ($this->getExtension ( $this->imgSrc ) == 'jpg' || $this->getExtension ( $this->imgSrc ) == 'jpeg' || $this->getExtension ( $this->imgSrc ) == 'jpe') {            imagejpeg($this->thumb,$savepath,$quality);        }    }    function  __destruct() {        imagedestroy ( $this->thumb );    }}?>